[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\manvi\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\manvi\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 69.9033ms
[debug]       Load.loadUnit: defsScala took 0.2802ms
[debug] [Loading] Scanning directory C:\Users\manvi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\manvi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.0527 ms
[debug]           Load.resolveProject(global-plugins) took 36.5032ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\manvi\.sbt\1.0\plugins, plugins: List(<none>))) took 74.7216ms
[debug] [Loading] Done in C:\Users\manvi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 91.3328ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2169ms
[debug]     Load.loadUnit(file:/C:/Users/manvi/.sbt/1.0/plugins/, ...) took 167.7668ms
[debug]   Load.apply: load took 294.9634ms
[debug]   Load.apply: resolveProjects took 5.0645ms
[debug]   Load.apply: finalTransforms took 41.6732ms
[debug]   Load.apply: config.delegates took 6.3059ms
[debug]   Load.apply: Def.make(settings)... took 299.3183ms
[debug]   Load.apply: structureIndex took 85.1587ms
[debug]   Load.apply: mkStreams took 1.3649ms
[info] loading global plugins from C:\Users\manvi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2200.7025ms
[debug]           Load.loadUnit: plugins took 19.6652ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler\project
[debug]             Load.loadUnit: mkEval took 6.7971ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2962 ms
[info] loading settings for project project-euler-build from idea.sbt ...
[debug]               Load.resolveProject(project-euler-build) took 2.5334ms
[debug]             Load.loadTransitive: finalizeProject(Project(id project-euler-build, base: D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler\project, plugins: List(<none>))) took 4.2439ms
[debug] [Loading] Done in D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler\project, returning: (project-euler-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1657.2946ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.8663ms
[debug]         Load.loadUnit(file:/D:/Coursera/Functional%20Prgramming%20Principles%20in%20Scala/Project-Euler/project/, ...) took 1680.5343ms
[debug]       Load.apply: load took 1681.4077ms
[debug]       Load.apply: resolveProjects took 0.0716ms
[debug]       Load.apply: finalTransforms took 7.7568ms
[debug]       Load.apply: config.delegates took 0.2636ms
[debug]       Load.apply: Def.make(settings)... took 59.6856ms
[debug]       Load.apply: structureIndex took 16.853ms
[debug]       Load.apply: mkStreams took 0.0018ms
[info] loading project definition from D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2982.8271ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler
[debug]       Load.loadUnit: mkEval took 0.1902ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4806 ms
[info] loading settings for project project-euler from build.sbt ...
[debug]         Load.resolveProject(project-euler) took 25.5835ms
[debug]       Load.loadTransitive: finalizeProject(Project(id project-euler, base: D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler, plugins: List(<none>))) took 27.945ms
[debug] [Loading] Done in D:\Coursera\Functional Prgramming Principles in Scala\Project-Euler, returning: (project-euler)
[debug]     Load.loadUnit: loadedProjectsRaw took 535.6986ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.9012ms
[debug]   Load.loadUnit(file:/D:/Coursera/Functional%20Prgramming%20Principles%20in%20Scala/Project-Euler/, ...) took 3525.9792ms
[debug] Load.apply: load took 3527.0504ms
[debug] Load.apply: resolveProjects took 0.0787ms
[debug] Load.apply: finalTransforms took 20.0587ms
[debug] Load.apply: config.delegates took 0.2371ms
[debug] Load.apply: Def.make(settings)... took 48.2332ms
[debug] Load.apply: structureIndex took 15.7078ms
[debug] Load.apply: mkStreams took 0.0017ms
[info] set current project to Project-Euler (in build file:/D:/Coursera/Functional%20Prgramming%20Principles%20in%20Scala/Project-Euler/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50629 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50629, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Project-Euler (in build file:/D:/Coursera/Functional%20Prgramming%20Principles%20in%20Scala/Project-Euler/)
[debug] > Exec(idea-shell, None, None)
